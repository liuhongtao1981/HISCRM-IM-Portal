/**
 * ÊµãËØï‰∏ªÈ¢òÂàóË°® - Ëß¶ÂèëË∞ÉËØïÊó•Âøó
 */

const io = require('socket.io-client');

console.log('ËøûÊé•Âà∞ Master...');

const socket = io('ws://localhost:3000', {
  reconnection: false,
  transports: ['websocket', 'polling']
});

socket.on('connect', () => {
  console.log(`‚úÖ ËøûÊé•ÊàêÂäü! Socket ID: ${socket.id}\n`);

  // Ê≥®ÂÜåÁõëÊéßÂÆ¢Êà∑Á´Ø
  const clientId = `debug_test_${Date.now()}`;
  console.log(`ÂèëÈÄÅÊ≥®ÂÜåËØ∑Ê±Ç: ${clientId}...`);
  socket.emit('monitor:register', {
    clientType: 'monitor',
    clientId: clientId
  });
});

socket.on('monitor:registered', (data) => {
  console.log(`‚úÖ Ê≥®ÂÜåÁ°ÆËÆ§:`, data);
});

socket.on('monitor:channels', (data) => {
  console.log(`‚úÖ Êî∂Âà∞È¢ëÈÅìÂàóË°®: ${data.channels.length} ‰∏™È¢ëÈÅì`);

  if (data.channels.length > 0) {
    const firstChannel = data.channels[0];
    console.log(`\nüìù Á¨¨‰∏Ä‰∏™È¢ëÈÅì:`, {
      id: firstChannel.id,
      name: firstChannel.name,
      messageCount: firstChannel.messageCount
    });

    // ËØ∑Ê±ÇËØ•È¢ëÈÅìÁöÑ‰∏ªÈ¢òÂàóË°® (‰ºöËß¶ÂèëË∞ÉËØïÊó•Âøó)
    console.log(`\nüîç ËØ∑Ê±ÇÈ¢ëÈÅì "${firstChannel.id}" ÁöÑ‰∏ªÈ¢òÂàóË°®...`);
    socket.emit('monitor:request_topics', { channelId: firstChannel.id });
  }
});

socket.on('monitor:topics', (data) => {
  console.log(`\n‚úÖ Êî∂Âà∞‰∏ªÈ¢òÂàóË°®: ${data.topics.length} ‰∏™‰∏ªÈ¢ò`);

  if (data.topics.length > 0) {
    console.log('\n‰∏ªÈ¢òËØ¶ÊÉÖ (Ââç 3 ‰∏™):');
    data.topics.slice(0, 3).forEach((topic, i) => {
      console.log(`  [${i + 1}] ${topic.title} (${topic.id})`);
      console.log(`      - Êú™ËØª: ${topic.unreadCount}, Ê∂àÊÅØÊï∞: ${topic.messageCount}`);
    });
  } else {
    console.log('‚ö†Ô∏è ‰∏ªÈ¢òÂàóË°®‰∏∫Á©∫!');
    console.log('\nËØ∑Ê£ÄÊü• Master Êó•Âøó‰∏≠ÁöÑ [DEBUG] ËæìÂá∫');
  }

  // ÂÆåÊàêÊµãËØï
  setTimeout(() => {
    console.log('\nÊµãËØïÂÆåÊàêÔºåÊñ≠ÂºÄËøûÊé•');
    socket.disconnect();
    process.exit(0);
  }, 2000);
});

socket.on('connect_error', (error) => {
  console.log(`‚ùå ËøûÊé•ÈîôËØØ: ${error.message}`);
  process.exit(1);
});

setTimeout(() => {
  console.log('‚è±Ô∏è Ë∂ÖÊó∂ (10Áßí)');
  socket.disconnect();
  process.exit(1);
}, 10000);

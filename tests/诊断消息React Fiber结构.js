/**
 * ‰∏ìÈó®ËØäÊñ≠Ê∂àÊÅØÂÖÉÁ¥†ÁöÑ React Fiber ÁªìÊûÑ
 * ÁõÆÁöÑ: ÊâæÂà∞Ê≠£Á°ÆÁöÑ Fiber Êï∞ÊçÆÊèêÂèñÊñπÊ≥ï
 */

const path = require('path');
const Database = require('better-sqlite3');
const { chromium } = require('playwright');

async function diagnoseMessageFiber() {
  console.log('üî¨ ËØäÊñ≠Ê∂àÊÅØÂÖÉÁ¥†ÁöÑ React Fiber ÁªìÊûÑ\n');

  // 1. ËøûÊé•Êï∞ÊçÆÂ∫ì
  const dbPath = path.join(__dirname, '../packages/master/data/master.db');
  const db = new Database(dbPath);

  const account = db.prepare('SELECT * FROM accounts WHERE platform = ? LIMIT 1').get('douyin');
  console.log(`‚úÖ Ë¥¶Êà∑: ${account.id}\n`);

  // 2. ÂêØÂä®ÊµèËßàÂô®
  const userDataDir = path.join(__dirname, '../packages/worker/data/browser/worker-1/browser_' + account.id);
  const context = await chromium.launchPersistentContext(userDataDir, {
    headless: false,
    viewport: { width: 1280, height: 720 },
  });

  const page = await context.newPage();

  try {
    // 3. ÂØºËà™Âπ∂ÊâìÂºÄ‰ºöËØù
    console.log('üìç ÂØºËà™Âà∞ÁßÅ‰ø°È°µÈù¢...');
    await page.goto('https://creator.douyin.com/creator-micro/data/following/chat', {
      waitUntil: 'domcontentloaded',
      timeout: 30000
    });

    await page.waitForTimeout(5000);
    await page.waitForSelector('[role="list-item"]', { timeout: 10000 });

    // ÁÇπÂáªÊúÄÂêé‰∏Ä‰∏™‰ºöËØù
    const conversations = await page.locator('[role="list-item"]').all();
    await conversations[conversations.length - 1].click();
    await page.waitForTimeout(3000);

    console.log('‚úÖ ‰ºöËØùÂ∑≤ÊâìÂºÄ\n');

    // 4. ‰∏ìÈó®Êü•ÊâæÊ∂àÊÅØÂÆπÂô®ÂÜÖÁöÑÂÖÉÁ¥†
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üîç Êü•ÊâæÊ∂àÊÅØÂÆπÂô®');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

    const messageContainerInfo = await page.evaluate(() => {
      // Êü•ÊâæÂèØËÉΩÁöÑÊ∂àÊÅØÂÆπÂô®
      const grids = document.querySelectorAll('[role="grid"]');

      const results = {
        grids: [],
        messageElements: [],
      };

      grids.forEach((grid, gridIndex) => {
        const gridInfo = {
          index: gridIndex,
          className: grid.className,
          childCount: grid.children.length,
          scrollHeight: grid.scrollHeight,
          clientHeight: grid.clientHeight,
          innerHTML: grid.innerHTML.substring(0, 500),
        };

        // Ê£ÄÊü•Ëøô‰∏™ grid ÊòØÂê¶ÂåÖÂê´Ê∂àÊÅØ
        const messagesInGrid = grid.querySelectorAll('[class*="message"]');
        gridInfo.messageCount = messagesInGrid.length;

        results.grids.push(gridInfo);

        // Â¶ÇÊûúËøô‰∏™ grid ÂåÖÂê´Ê∂àÊÅØÔºåÊ∑±ÂÖ•ÂàÜÊûê
        if (messagesInGrid.length > 0) {
          messagesInGrid.forEach((msgEl, msgIndex) => {
            results.messageElements.push({
              gridIndex: gridIndex,
              messageIndex: msgIndex,
              className: msgEl.className,
              textContent: msgEl.textContent?.substring(0, 100) || '',
              parentChain: getParentChain(msgEl, 5),
            });
          });
        }
      });

      function getParentChain(element, maxDepth) {
        const chain = [];
        let current = element;
        let depth = 0;

        while (current && depth < maxDepth) {
          chain.push({
            tag: current.tagName,
            className: current.className,
            id: current.id,
            role: current.getAttribute('role'),
          });
          current = current.parentElement;
          depth++;
        }

        return chain;
      }

      return results;
    });

    console.log(`ÊâæÂà∞ ${messageContainerInfo.grids.length} ‰∏™ [role="grid"] ÂÆπÂô®:\n`);
    messageContainerInfo.grids.forEach((grid, i) => {
      console.log(`Grid ${i + 1}:`);
      console.log(`  className: ${grid.className}`);
      console.log(`  Â≠êÂÖÉÁ¥†Êï∞: ${grid.childCount}`);
      console.log(`  Ê∂àÊÅØÊï∞: ${grid.messageCount}`);
      console.log(`  scrollHeight: ${grid.scrollHeight}px`);
      console.log(`  clientHeight: ${grid.clientHeight}px\n`);
    });

    console.log(`\nÊâæÂà∞ ${messageContainerInfo.messageElements.length} ‰∏™Ê∂àÊÅØÂÖÉÁ¥†\n`);

    if (messageContainerInfo.messageElements.length > 0) {
      console.log('Ê∂àÊÅØÂÖÉÁ¥†ËØ¶ÊÉÖ:');
      messageContainerInfo.messageElements.slice(0, 3).forEach((msg, i) => {
        console.log(`\nÊ∂àÊÅØ ${i + 1}:`);
        console.log(`  className: ${msg.className}`);
        console.log(`  ÊñáÊú¨: ${msg.textContent}`);
        console.log(`  Áà∂Á∫ßÈìæ (Ââç3Â±Ç):`);
        msg.parentChain.slice(0, 3).forEach((parent, j) => {
          console.log(`    ${j}. <${parent.tag}> class="${parent.className}" role="${parent.role || ''}"`);
        });
      });
    }

    // 5. Ê∑±ÂÖ•ÂàÜÊûêÊ∂àÊÅØÂÖÉÁ¥†ÁöÑ React Fiber
    console.log('\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üî¨ Ê∑±Â∫¶ÂàÜÊûêÊ∂àÊÅØÂÖÉÁ¥†ÁöÑ React Fiber');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

    const fiberDeepAnalysis = await page.evaluate(() => {
      const results = [];

      // Âè™ÂàÜÊûêÊ∂àÊÅØÂÆπÂô®ÂÜÖÁöÑÂÖÉÁ¥†
      const messageGrid = Array.from(document.querySelectorAll('[role="grid"]'))
        .find(grid => grid.querySelectorAll('[class*="message"]').length > 0);

      if (!messageGrid) {
        return { error: 'Êú™ÊâæÂà∞ÂåÖÂê´Ê∂àÊÅØÁöÑ grid' };
      }

      // Ëé∑ÂèñÊâÄÊúâÊ∂àÊÅØÂÖÉÁ¥†
      const messageElements = messageGrid.querySelectorAll('[class*="message"]');

      messageElements.forEach((element, elementIndex) => {
        // Âè™ÂàÜÊûêÂâç 3 ‰∏™
        if (elementIndex >= 3) return;

        const fiberKey = Object.keys(element).find(key => key.startsWith('__react'));
        if (!fiberKey) {
          results.push({
            elementIndex: elementIndex,
            className: element.className,
            error: 'Ê≤°Êúâ React Fiber ÈîÆ',
          });
          return;
        }

        const analysis = {
          elementIndex: elementIndex,
          className: element.className,
          textContent: element.textContent?.substring(0, 50) || '',
          fiberKey: fiberKey,
          fiberTree: [],
        };

        // Âêë‰∏äÈÅçÂéÜ Fiber Ê†ë
        let current = element[fiberKey];
        let depth = 0;

        while (current && depth < 30) {
          const node = {
            depth: depth,
            type: typeof current.type === 'function' ? current.type.name : (current.type || 'unknown'),
            propsKeys: current.memoizedProps ? Object.keys(current.memoizedProps) : [],
            props: {},
          };

          // ËÆ∞ÂΩïÊâÄÊúâ props
          if (current.memoizedProps) {
            const props = current.memoizedProps;

            // ËÆ∞ÂΩïÊâÄÊúâÈùûÂáΩÊï∞ÁöÑ props
            Object.keys(props).forEach(key => {
              const value = props[key];

              if (typeof value === 'function') {
                node.props[key] = '[Function]';
              } else if (typeof value === 'object' && value !== null) {
                // ÂØπ‰∫éÂØπË±°ÔºåËÆ∞ÂΩïÂÖ∂ÈîÆ
                if (Array.isArray(value)) {
                  node.props[key] = `[Array(${value.length})]`;
                } else {
                  const objKeys = Object.keys(value);
                  if (objKeys.length > 0 && objKeys.length < 10) {
                    node.props[key] = `{${objKeys.join(', ')}}`;

                    // Â¶ÇÊûúÊòØÊ∂àÊÅØÁõ∏ÂÖ≥ÁöÑÂØπË±°ÔºåÂ±ïÂºÄ
                    if (key === 'content' || key === 'message' || key === 'data') {
                      node.props[key + '_expanded'] = {};
                      objKeys.forEach(objKey => {
                        const objValue = value[objKey];
                        if (typeof objValue !== 'function' && typeof objValue !== 'object') {
                          node.props[key + '_expanded'][objKey] = objValue;
                        } else if (typeof objValue === 'string') {
                          node.props[key + '_expanded'][objKey] = objValue.substring(0, 100);
                        }
                      });
                    }
                  } else {
                    node.props[key] = `{${objKeys.length} keys}`;
                  }
                }
              } else if (typeof value === 'string') {
                node.props[key] = value.substring(0, 100);
              } else {
                node.props[key] = value;
              }
            });
          }

          analysis.fiberTree.push(node);
          current = current.return;
          depth++;
        }

        results.push(analysis);
      });

      return results;
    });

    if (fiberDeepAnalysis.error) {
      console.log(`‚ùå ${fiberDeepAnalysis.error}`);
    } else {
      fiberDeepAnalysis.forEach((analysis, i) => {
        console.log(`\n‚îÅ‚îÅ‚îÅ Ê∂àÊÅØÂÖÉÁ¥† ${i + 1} ‚îÅ‚îÅ‚îÅ`);
        console.log(`className: ${analysis.className}`);
        console.log(`ÊñáÊú¨: ${analysis.textContent}`);
        console.log(`Fiber ÈîÆ: ${analysis.fiberKey}`);
        console.log(`\nFiber Ê†ë (Ââç 15 Â±Ç):\n`);

        analysis.fiberTree.slice(0, 15).forEach(node => {
          console.log(`Ê∑±Â∫¶ ${node.depth}: ${node.type}`);

          if (Object.keys(node.props).length > 0) {
            console.log(`  Props: ${JSON.stringify(node.props, null, 2)}`);
          }
          console.log('');
        });
      });
    }

  } catch (error) {
    console.error('\n‚ùå ËØäÊñ≠Â§±Ë¥•:', error);
    console.error(error.stack);
  } finally {
    console.log('\n‚è∏Ô∏è  Á≠âÂæÖ 15 ÁßíÂêéÂÖ≥Èó≠ÊµèËßàÂô®...');
    await page.waitForTimeout(15000);

    await context.close();
    db.close();
    console.log('\n‚úÖ ËØäÊñ≠ÂÆåÊàê');
  }
}

diagnoseMessageFiber().catch(error => {
  console.error('‚ùå ËÑöÊú¨ÊâßË°åÂ§±Ë¥•:', error);
  process.exit(1);
});
